package ra.dev.jwt;import io.jsonwebtoken.*;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Component;import ra.dev.model.entity.User;import ra.dev.model.service.UserService;import ra.dev.security.CustomUserDetails;import java.util.Date;@Component@Slf4jpublic class JwtTokenProvider {    @Autowired    private UserService userService;    @Value("${ra.jwt.secret}")    private String JWT_SECRET;    @Value(("${ra.jwt.expiration}"))    private int JWT_EXPIRATION;    public String getUserNameFromJwt(String token) {        Claims claims = Jwts.parser().setSigningKey(JWT_SECRET)                .parseClaimsJws(token).getBody();        //tra lai thong tin username        return claims.getSubject();    }    //Validate thong tin cua JWT    public boolean validateToken(String token) {        System.out.println(JWT_SECRET);        System.out.println(token);        try {            Jwts.parser().setSigningKey(JWT_SECRET)                    .parseClaimsJws(token);            return true;        } catch (MalformedJwtException ex) {            log.error("Invalid JWT Token");        } catch (ExpiredJwtException ex) {            log.error("Expired JWT Token");        } catch (UnsupportedJwtException ex) {            log.error("Unsupported JWT Token");        } catch (IllegalArgumentException ex) {            log.error("JWT claims String is empty");        }        return false;    }}